{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","searchText","onChange","value","PersonForm","newPerson","handleNameChange","handlePhoneChange","addNewPerson","onSubmit","name","number","type","Persons","persons","onDelete","map","person","key","onClick","id","baseUrl","axios","get","then","response","data","post","url","put","delete","Notification","message","text","className","isSuccess","App","useState","setPersons","setSearchText","setNewPerson","setMessage","useEffect","personService","personsToShow","length","filter","toLowerCase","includes","showMessage","setTimeout","event","target","preventDefault","existingPerson","find","window","confirm","returnedPerson","newPersons","p","concat","catch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.380ab0d2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({ searchText, onChange }) => (\n    <div>\n        filter shown with <input value={searchText} onChange={onChange} />\n    </div>\n)\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = ({ newPerson, handleNameChange, handlePhoneChange, addNewPerson }) => {\n    return (\n        <form onSubmit={addNewPerson}>\n            <div>\n                name:\n          <input value={newPerson.name}\n                    onChange={handleNameChange}\n                />\n\n            </div>\n            <div>\n                number:\n          <input value={newPerson.number}\n                    onChange={handlePhoneChange}\n                />\n\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Persons = ({ persons, onDelete }) => (\n    persons.map((person) => (\n        <p key={person.name}> \n            {person.name} {person.number}\n            <button onClick={onDelete(person.id)}>delete</button>\n        </p>\n    ))\n)\n\nexport default Persons","import axios from 'axios'\nconst baseUrl = \"/api/persons\"\n\nconst getAll = () => {\n    return axios\n            .get(baseUrl)\n            .then(response => response.data)\n}\n\nconst create = newPerson => {\n    return axios\n            .post(baseUrl, newPerson)\n            .then(response => response.data)\n}\n\nconst remove = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, newPerson) => {\n    const url = `${baseUrl}/${id}`\n    return axios.put(url, newPerson)\n            .then(response => response.data)\n}\n\nexport default { getAll, create, update, remove } ","import React from 'react'\n\nconst Notification = ({ message })  => {\n    if (null === message.text) {\n        return null\n    }\n    const className = message.isSuccess \n                        ? \"success\" \n                        : \"error\"\n    return (\n        <div className={className}>\n            {message.text}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [searchText, setSearchText] = useState('')\n  const [newPerson, setNewPerson] = useState({ name: '', number: '' })\n  const [message, setMessage] = useState({isSuccess: true, text: null})\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(persons => {\n        setPersons(persons)\n      })\n  }, [])\n\n  const personsToShow = searchText.length === 0\n    ? [...persons]\n    : persons.filter(person => person.name.toLowerCase().includes(searchText.toLowerCase()))\n\n  const handleNameChange = (event) => {\n    setNewPerson({ ...newPerson, name: event.target.value })\n  }\n\n  const handlePhoneChange = (event) => {\n    setNewPerson({ ...newPerson, number: event.target.value })\n  }\n\n  const showMessage = (isSuccess, text) => {\n    setMessage({isSuccess: isSuccess, text: text})\n    setTimeout(() => {\n      setMessage({...message, text: null})\n    }, 5000)\n  }\n\n  const addNewPerson = (event) => {\n    event.preventDefault()\n    const existingPerson = persons.find(person => person.name === newPerson.name)\n    if (existingPerson) {\n      const shouldUpdate = window.confirm(`${newPerson.name} is already added to phonebook, replace the old number with a new one?`)\n      if (shouldUpdate) {\n        personService\n          .update(existingPerson.id, newPerson)\n          .then(returnedPerson => {\n            const newPersons =  persons.filter(p => p.id !== existingPerson.id)\n                                        .concat(returnedPerson)\n            setPersons(newPersons)\n            showMessage(true, `Updated ${newPerson.name}`)\n          })\n          .catch(() => {\n            setPersons(persons.filter(person => person.id !== existingPerson.id))\n            showMessage(false, `Information of ${newPerson.name} has already been removed from server`)\n          }) \n      }\n\n      setNewPerson({ name: '', number: '' })\n      return\n    }\n\n    personService\n      .create(newPerson)\n      .then(returnedPerson => {\n        setNewPerson({ name: '', number: '' })\n        setPersons([...persons, returnedPerson])\n        showMessage(true, `Added ${newPerson.name}`)\n      })\n  }\n  \n  const onDelete = id => () => {\n    const person = persons.find(p => p.id === id)\n    if(!window.confirm(`Delete ${person.name}`)) {\n      return\n    }\n\n    personService\n      .remove(id)\n      .then(() => {\n        setPersons(persons.filter(p => person.id !== p.id))\n        showMessage(true, `Deleted ${person.name}`)\n      })\n      .catch(() => {\n        setPersons(persons.filter(p => person.id !== p.id))\n        showMessage(false, `Information of ${person.name} has already been removed from server`)\n      })\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter searchText={searchText} onChange={(event) => setSearchText(event.target.value)} />\n      <h2>add a new </h2>\n      <PersonForm newPerson={newPerson} \n                  addNewPerson={addNewPerson} \n                  handleNameChange={handleNameChange}\n                  handlePhoneChange={handlePhoneChange} />\n\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} onDelete={onDelete} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}